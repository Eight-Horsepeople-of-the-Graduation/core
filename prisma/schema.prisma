generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int                @id @default(autoincrement())
    username          String             @unique
    email             String             @unique
    password          String
    country           String
    gender            Gender
    birthDate         DateTime?
    joinDate          DateTime           @default(now())
    profilePicture    String?
    isAdmin           Boolean            @default(false)
    books             BookToUser[]
    reviews           Review[]
    readingChallenges ReadingChallenge[]
    lists             List[]
}

model Book {
    id          Int               @id @default(autoincrement())
    title       String
    isbn        String            @unique
    description String
    publishDate DateTime
    format      Format
    language    String
    country     String
    numOfPages  Int
    owners      BookToUser[]
    shelf       BookToBookshelf[]
    reviews     Review[]
}

model Bookshelf {
    id         Int               @id @default(autoincrement())
    title      String
    numOfBooks Int
    books      BookToBookshelf[]
}

model Review {
    id          Int    @id @default(autoincrement())
    title       String
    description String
    rating      Float

    User   User? @relation(fields: [userId], references: [id])
    userId Int?
    Book   Book? @relation(fields: [bookId], references: [id])
    bookId Int?
}

model ReadingChallenge {
    id         Int    @id @default(autoincrement())
    title      String
    userId     Int
    user       User   @relation(fields: [userId], references: [id])
    type       Type
    numOfBooks Int
    progress   Int
}

model List {
    id          Int      @id @default(autoincrement())
    title       String
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
    description String
    numOfbooks  Int
    createdAt   DateTime @default(now())
}

model BookToUser {
    user User @relation(fields: [userId], references: [id])
    book Book @relation(fields: [bookId], references: [id])

    userId Int
    bookId Int

    @@id([userId, bookId])
}

model BookToBookshelf {
    book      Book      @relation(fields: [bookId], references: [id])
    bookshelf Bookshelf @relation(fields: [bookshelfId], references: [id])

    bookId      Int
    bookshelfId Int

    @@id([bookId, bookshelfId])
}

enum Format {
    PAPERBACK
    EBOOK
    HARDCOVER
}

enum Gender {
    MALE
    FEMALE
}

enum Type {
    ANNUAL
    MONTHLY
    WEEKLY
}
